{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Byte&Bite app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "A RESTful API for managing recipes. Supports user registration, authentication, and password reset via email.\n"
  },
  "servers": [
    {
      "url": "https://byte-bitebd.onrender.com/api",
      "description": "Production server"
    },
    {
      "url": "http://127.0.0.1:3000/api",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Categories",
      "description": "Operations about categories."
    },
    {
      "name": "Ingredients",
      "description": "Operations about ingredients."
    },
    {
      "name": "Recipes",
      "description": "Operations about recipes."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "Operations about users."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "createUser",
        "description": "Registers a new user account and returns access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user and returned access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Authenticate an existing user and return access token with user data",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john123@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "examplepwd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated the user and returned an access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "accessToken"
                      ],
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/user"
                        },
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the authenticated user by deleting the session.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out. No content is returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session",
        "operationId": "refreshSession",
        "description": "Refreshes the user's session by issuing a new access token and updating session cookies.\n\n⚠️ **Swagger UI does not store cookies. Please use Postman or your frontend to test this route properly.**\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed the session and returned a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "msCUebr6BGhZcOO0qNLU6JbWd0AdmBKYadwnknjq"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Returns the currently authenticated user's information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "operationId": "getCategories",
        "summary": "Retrieve recipe category list",
        "tags": [
          "Categories"
        ],
        "description": "Returns an array of recipe categories. If no categories are found, a 404 error is returned.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found categories!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/category"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No categories found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "operationId": "getIngredients",
        "summary": "Retrieve a list of ingredients",
        "tags": [
          "Ingredients"
        ],
        "description": "Returns an array of ingredients. Returns 404 if no ingredients found.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found ingredients!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ingredient"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ingredients not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "No ingredients found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error: Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get filtered and paginated list of recipes",
        "operationId": "getRecipes",
        "description": "Get a list of recipes with filtering and pagination support",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter by ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter by name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered list of recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 45
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get a single recipe by its ID",
        "operationId": "getRecipeById",
        "description": "Retrieve detailed information about a specific recipe using its unique ID.\nOptionally supports authentication — if a valid access token is provided, the response will include a `isFavorite` field indicating whether the recipe is in the user's favorites list.\n",
        "Example request": "`GET http://localhost:3000/api/recipes/6462a8f74c3d0ddd28898016`\n",
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d7e8a4b9c3d12a5d8e9b74"
            },
            "description": "Pass only the recipe ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data",
                    "isFavorite"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe found successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    },
                    "isFavorite": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid recipe ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid recipe ID format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/add-recipe": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "operationId": "createRecipe",
        "description": "Create a new recipe with optional photo upload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "decr",
                  "cookiesTime",
                  "category",
                  "ingredients",
                  "instruction"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "Chocolate Cake"
                  },
                  "decr": {
                    "type": "string",
                    "maxLength": 200,
                    "example": "Rich and moist cake perfect for celebrations."
                  },
                  "cookiesTime": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 360,
                    "example": 45
                  },
                  "cals": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 1,
                    "maximum": 10000,
                    "example": 320
                  },
                  "category": {
                    "type": "string",
                    "example": "dessert"
                  },
                  "ingredients": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "measure"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "640c2dd963a319ea671e36f9"
                        },
                        "measure": {
                          "type": "string",
                          "example": "200g"
                        }
                      }
                    },
                    "minItems": 2,
                    "maxItems": 16
                  },
                  "instruction": {
                    "type": "string",
                    "maxLength": 1200,
                    "example": "Mix all ingredients and bake at 180°C for 35 minutes."
                  },
                  "recipeImg": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file of the recipe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new recipe",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a new recipe!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/own": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipes added by the user with pagination, sorting, and filtering",
        "operationId": "getMyRecipes",
        "description": "Retrieve all recipes added by the authenticated user with support for pagination, sorting, and filtering.\nThe response includes pagination info:\n  \"page\": 1,\n  \"perPage\": 12,\n  \"totalItems\": 4,\n  \"totalPages\": 1,\n  \"hasPreviousPage\": false,\n  \"hasNextPage\": false\n",
        "Sorting is supported on the following fields": "_id, name, cals, cookiesTime, category, createdAt, updatedAt",
        "Filtering can be done by": [
          "name (partial or full match)",
          "category",
          "isFavorite (whether the recipe is marked as favorite by the user)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "_id",
                "title",
                "cals",
                "cookiesTime",
                "category",
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order:ascending or descending"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10,
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter by ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter by recipe name"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data",
                    "isFavorite"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe found successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    },
                    "isFavorite": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "There are no recipes yet!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "There are no recipes yet!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/favorites": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get favorite recipes of the authenticated user",
        "operationId": "getFavorites",
        "description": "Retrieve paginated list of favorite recipes for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "example": "dessert"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string",
              "example": "chocolate"
            },
            "description": "Filter by ingredient"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "Japanese gohan rice"
            },
            "description": "Filter by name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favorite recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved favorite recipes"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "favorites",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "favorites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 12
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 34
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add a recipe to favorites and get paginated favorite recipes",
        "operationId": "addToFavorites",
        "description": "Add a recipe to the authenticated user favorites list and return paginated favorites",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 12
            },
            "description": "Number of favorite recipes per page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipeId"
                ],
                "properties": {
                  "recipeId": {
                    "type": "string",
                    "example": "65d7e8a4b9c3d12a5d8e9b74",
                    "description": "ID of the recipe to add to favorites"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new recipe!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a new recipe!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "favorites",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasPreviousPage",
                        "hasNextPage"
                      ],
                      "properties": {
                        "favorites": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 12
                        },
                        "totalItems": {
                          "type": "integer",
                          "example": 34
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/profile/favorites/{recipeId}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove a recipe from favorites",
        "operationId": "removeFavorite",
        "description": "Remove a recipe from the authenticated user favorites list",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65d7e8a4b9c3d12a5d8e9b74"
            },
            "description": "ID of the recipe to remove from favorites"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe removed from favorites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe removed from favorites successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "favorites"
                      ],
                      "properties": {
                        "favorites": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "65d7e8a4b9c3d12a5d8e9b74"
                          },
                          "description": "List of recipe IDs still in favorites after removal"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "john123@gmail.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's created date",
            "example": "2025-03-27T19:43:21.686+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User's updated date",
            "example": "2025-03-27T19:43:21.686+00:00"
          }
        }
      },
      "category": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab12"
          },
          "name": {
            "type": "string",
            "example": "breakfast"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:30:00.000Z"
          }
        }
      },
      "ingredient": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "desc",
          "img",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "665d14a36a70b4794fbcab34"
          },
          "name": {
            "type": "string",
            "example": "Egg"
          },
          "desc": {
            "type": "string",
            "example": "A fresh organic egg"
          },
          "img": {
            "type": "string",
            "example": "https://example.com/images/egg.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-06-01T12:30:00.000Z"
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "decr",
          "cookiesTime",
          "category",
          "ingredients",
          "ingredientAmount",
          "instruction",
          "owner"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "65d7e8a4b9c3d12a5d8e9b74"
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "example": "Chocolate Cake"
          },
          "decr": {
            "type": "string",
            "maxLength": 200,
            "example": "Rich and moist cake perfect for celebrations."
          },
          "cookiesTime": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "example": 45
          },
          "cals": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 1,
            "maximum": 10000,
            "example": 320
          },
          "category": {
            "type": "string",
            "example": "dessert"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ingredient"
            }
          },
          "ingredientAmount": {
            "type": "integer",
            "minimum": 2,
            "maximum": 16,
            "example": 5
          },
          "instruction": {
            "type": "string",
            "maxLength": 1200,
            "example": "Mix all ingredients and bake at 180°C for 35 minutes."
          },
          "recipeImg": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "example": "https://example.com/images/recipe.jpg"
          },
          "owner": {
            "type": "string",
            "example": "65d123abc9876543210fedcb"
          },
          "isFavorite": {
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T14:23:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-05T11:00:00Z"
          }
        },
        "example": {
          "_id": "6462a8f74c3d0ddd28898084",
          "title": "Japanese gohan rice",
          "category": "Side",
          "owner": "64c8d958249fae54bae90bb9",
          "decr": "A staple in Japanese cuisine, Gohan rice is a short-grain, sticky rice…",
          "cookiesTime": 30,
          "instruction": "STEP 1\nRinsing and soaking your rice is key to achieving the perfect …",
          "ingredients": {
            "_id": "640c2dd963a319ea671e373f",
            "name": "Pepper",
            "desc": "A spice made from ground dried peppercorns, commonly used in cooking and as a table seasoning for its pungent and spicy flavor.",
            "img": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e373f.png"
          },
          "measure": "20g",
          "recipeImg": "https://ftp.goit.study/img/so-yummy/preview/Japanese%20gohan%20rice.jpg",
          "createdAt": "2023-03-11T19:25:33.247+00:00",
          "updatedAt": "2023-04-14T20:02:28.085+00:00"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "ID should be an ObjectId"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": [
                          "\"email\" must be a valid email"
                        ]
                      }
                    }
                  ]
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "ID should be an ObjectId"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": [
                              "\"email\" must be a valid email"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized - missing or invalid credentials, expired token, or session-related issue",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Access token expired"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "The requested contact or route was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}